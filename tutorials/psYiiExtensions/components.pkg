<refentry id="{@id}">
	<refnamediv>
		<refname>Building Blocks</refname>
	</refnamediv>
	<refsynopsisdiv>
		<author>
			Jerry Ablan
			<authorblurb>
				{@link mailto:yii@pogostick.com yii@pogostick.com}
			</authorblurb>
		</author>
	</refsynopsisdiv>
	{@toc}
	<refsect1 id="{@id components}">
		<title>Library Foundation</title>
		<para>
		The basic functionality built into the library is a dynamic variable, or options, system. Using this
		funcationality, one can create options at runtime. These are stored in a way
		that makes it simple to use them as arguments for your own components or third-party ones.
		</para>
		<para>
		The second base functionality for the library is enhanced behavior functionality. Behaviors
		attached to the base components can have their own options. In addition, behavior variables may be accessed
		directly by the owner of the behavior with the need for a behavior prefix:
		</para>
		<para><b>Without psYiiExtensions...</b></para>
		<programlisting role="php">
			<![CDATA[
//	Create a component and attach a behavior
$oComp = new CComponent();
$oComp->attachBehavior( 'myBehavior', '''x.y.z.behavior' );

//	Access a behavior property
$oComp->myBehavior->propertyName
			]]>
		</programlisting>
		<para><b>With psYiiExtensions...</b></para>
		<programlisting role="php">
			<![CDATA[
//	Create a component, CPSComponentBehavior is automatically attached
$oComp = new CPSComponent();

//	Access CPSComponentBehavior::internalName property
echo $oComp->internalName;
			]]>
		</programlisting>
	</refsect1>
</refentry>